#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

int findset(int x, vector <int> &r) {
    // we compress path here too
    if (r[x]!=x) r[x]=findset(r[x],r);
    return(r[x]);   
}

int main() {
    int n,q,i;
    cin >> q;
    n=2*q;
    // makeset
    vector <int> root(n+1);
    vector <int> count(n+1);
    for (int i=1;i<=n;i++) {
        root[i]=i;
        count[i]=1;
    }    
    
    while (q--) {

            int x,y;
            cin >> x >> y;   
            
            // find root of x & y
            int rx=findset(x,root);
            int ry=findset(y,root);
       
            // skip, already in same community
            if (rx==ry) continue;
 
            // do a union not using ranking 
            root[rx]=ry;
            count[ry]+=count[rx];
            count[rx]=0;
            
        }
        sort(count.begin(),count.end());
        for(i=0;i<=n;i++)
        {
            if(count[i]!=0 && count[i]!=1)
            {
              printf("%d %d",count[i],count[n]);
              break;
            }

            
        }

    return 0;
}
